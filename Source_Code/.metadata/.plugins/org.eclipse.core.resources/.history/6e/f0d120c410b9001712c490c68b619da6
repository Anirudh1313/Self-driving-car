/// DBC file: ../../alpha_dbc.dbc    Self node: 'BRIDGE'  (ALL = 0)
/// This file can be included by a source file, for example: #include "generated.h"
#ifndef __GENEARTED_DBC_PARSER
#define __GENERATED_DBC_PARSER
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>



/// Extern function needed for dbc_encode_and_send()
extern bool dbc_app_send_can_msg(uint32_t mid, uint8_t dlc, uint8_t bytes[8]);

/// Missing in Action structure
typedef struct {
    uint32_t is_mia : 1;          ///< Missing in action flag
    uint32_t mia_counter_ms : 31; ///< Missing in action counter
} dbc_mia_info_t;

/// CAN message header structure
typedef struct { 
    uint32_t mid; ///< Message ID of the message
    uint8_t  dlc; ///< Data length of the message
} dbc_msg_hdr_t; 

// static const dbc_msg_hdr_t MOTOR_SIGNAL_HDR =                     {  100, 3 };
static const dbc_msg_hdr_t DESTINATION_HDR =                      {  450, 8 };
static const dbc_msg_hdr_t CURRENT_HDR =                          {  550, 8 };




/// Message: DESTINATION from 'BRIDGE', DLC: 8 byte(s), MID: 450
typedef struct {
    uint32_t LATITUDE_degrees;                ///< B31:0   Destination: GPS,DRIVER
    uint32_t LONGITUDE_degrees;               ///< B63:32   Destination: GPS,DRIVER

    // No dbc_mia_info_t for a message that we will send
} DESTINATION_t;


/// Message: CURRENT from 'GPS', DLC: 8 byte(s), MID: 550
typedef struct {
    uint32_t CURRENT_latitude;                ///< B31:0   Destination: BRIDGE
    uint32_t CURRENT_longitude;               ///< B63:32   Destination: BRIDGE

    dbc_mia_info_t mia_info;
} CURRENT_t;


/// @{ These 'externs' need to be defined in a source file of your project
extern const uint32_t                             CURRENT__MIA_MS;
extern const CURRENT_t                            CURRENT__MIA_MSG;
/// @}


/// Not generating code for dbc_encode_MOTOR_SIGNAL() since the sender is DRIVER and we are BRIDGE

/// Encode BRIDGE's 'DESTINATION' message
/// @returns the message header of this message
static inline dbc_msg_hdr_t dbc_encode_DESTINATION(uint8_t bytes[8], DESTINATION_t *from)
{
    uint32_t raw;
    bytes[0]=bytes[1]=bytes[2]=bytes[3]=bytes[4]=bytes[5]=bytes[6]=bytes[7]=0;

    raw = ((uint32_t)(((from->LATITUDE_degrees)))) & 0xffffffff;
    bytes[0] |= (((uint8_t)(raw) & 0xff)); ///< 8 bit(s) starting from B0
    bytes[1] |= (((uint8_t)(raw >> 8) & 0xff)); ///< 8 bit(s) starting from B8
    bytes[2] |= (((uint8_t)(raw >> 16) & 0xff)); ///< 8 bit(s) starting from B16
    bytes[3] |= (((uint8_t)(raw >> 24) & 0xff)); ///< 8 bit(s) starting from B24

    raw = ((uint32_t)(((from->LONGITUDE_degrees)))) & 0xffffffff;
    bytes[4] |= (((uint8_t)(raw) & 0xff)); ///< 8 bit(s) starting from B32
    bytes[5] |= (((uint8_t)(raw >> 8) & 0xff)); ///< 8 bit(s) starting from B40
    bytes[6] |= (((uint8_t)(raw >> 16) & 0xff)); ///< 8 bit(s) starting from B48
    bytes[7] |= (((uint8_t)(raw >> 24) & 0xff)); ///< 8 bit(s) starting from B56

    return DESTINATION_HDR;
}

/// Encode and send for dbc_encode_DESTINATION() message
static inline bool dbc_encode_and_send_DESTINATION(DESTINATION_t *from)
{
    uint8_t bytes[8];
    const dbc_msg_hdr_t hdr = dbc_encode_DESTINATION(bytes, from);
    return dbc_app_send_can_msg(hdr.mid, hdr.dlc, bytes);
}



/// Not generating code for dbc_encode_CURRENT() since the sender is GPS and we are BRIDGE

/// Not generating code for dbc_decode_MOTOR_SIGNAL() since 'BRIDGE' is not the recipient of any of the signals

/// Not generating code for dbc_decode_DESTINATION() since 'BRIDGE' is not the recipient of any of the signals

/// Decode GPS's 'CURRENT' message
/// @param hdr  The header of the message to validate its DLC and MID; this can be NULL to skip this check
static inline bool dbc_decode_CURRENT(CURRENT_t *to, const uint8_t bytes[8], const dbc_msg_hdr_t *hdr)
{
    const bool success = true;
    // If msg header is provided, check if the DLC and the MID match
    if (NULL != hdr && (hdr->dlc != CURRENT_HDR.dlc || hdr->mid != CURRENT_HDR.mid)) {
        return !success;
    }

    uint32_t raw;
    raw  = ((uint32_t)((bytes[0]))); ///< 8 bit(s) from B0
    raw |= ((uint32_t)((bytes[1]))) << 8; ///< 8 bit(s) from B8
    raw |= ((uint32_t)((bytes[2]))) << 16; ///< 8 bit(s) from B16
    raw |= ((uint32_t)((bytes[3]))) << 24; ///< 8 bit(s) from B24
    to->CURRENT_latitude = ((raw));
    raw  = ((uint32_t)((bytes[4]))); ///< 8 bit(s) from B32
    raw |= ((uint32_t)((bytes[5]))) << 8; ///< 8 bit(s) from B40
    raw |= ((uint32_t)((bytes[6]))) << 16; ///< 8 bit(s) from B48
    raw |= ((uint32_t)((bytes[7]))) << 24; ///< 8 bit(s) from B56
    to->CURRENT_longitude = ((raw));

    to->mia_info.mia_counter_ms = 0; ///< Reset the MIA counter

    return success;
}


/// Handle the MIA for GPS's CURRENT message
/// @param   time_incr_ms  The time to increment the MIA counter with
/// @returns true if the MIA just occurred
/// @post    If the MIA counter reaches the MIA threshold, MIA struct will be copied to *msg
static inline bool dbc_handle_mia_CURRENT(CURRENT_t *msg, uint32_t time_incr_ms)
{
    bool mia_occurred = false;
    const dbc_mia_info_t old_mia = msg->mia_info;
    msg->mia_info.is_mia = (msg->mia_info.mia_counter_ms >= CURRENT__MIA_MS);

    if (!msg->mia_info.is_mia) { // Not MIA yet, so keep incrementing the MIA counter
        msg->mia_info.mia_counter_ms += time_incr_ms;
    }
    else if(!old_mia.is_mia)   { // Previously not MIA, but it is MIA now
        // Copy MIA struct, then re-write the MIA counter and is_mia that is overwriten
        *msg = CURRENT__MIA_MSG;
        msg->mia_info.mia_counter_ms = CURRENT__MIA_MS;
        msg->mia_info.is_mia = true;
        mia_occurred = true;
    }

    return mia_occurred;
}

#endif
